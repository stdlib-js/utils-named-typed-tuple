{
  "version": 3,
  "sources": ["../lib/contains.js", "../lib/has_distinct_elements.js", "../lib/validate.js", "../lib/ascending.js", "../lib/from_iterator.js", "../lib/from_iterator_map.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array contains a provided value.\n*\n* @private\n* @param {Array} arr - array\n* @param {*} v - search value\n* @returns {boolean} boolean indicating if an array contains a search value\n*/\nfunction contains( arr, v ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( arr[ i ] === v ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nmodule.exports = contains;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Tests if an array contains distinct elements.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {boolean} boolean indicating if an array contains distinct elements\n*/\nfunction hasDistinctElements( arr ) {\n\tvar obj;\n\tvar i;\n\n\tobj = {};\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( hasOwnProp( obj, arr[ i ] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tobj[ arr[i] ] = true;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hasDistinctElements;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar dtypes = require( '@stdlib/array-typed-dtypes' );\nvar format = require( '@stdlib/string-format' );\nvar contains = require( './contains.js' );\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - default data type\n* @param {string} [options.name] - tuple name\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64',\n*     'name': 'Complex128'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isString( opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dtype', opts.dtype ) );\n\t\t}\n\t\tif ( !contains( DTYPES, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a recognized data type. Option: `%s`.', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t\tif ( !isString( opts.name ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'name', opts.name ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Specifies a sort order for ordering numeric values in ascending order.\n*\n* ## Notes\n*\n* -   If `a < b`, then function returns a number less than `0`, which specifies to sort `a` to an index lower than `b`.\n* -   If `a > b`, then function returns a number greater than `0`, which specifies to sort `a` to an index higher than `b`.\n* -   If `a == b`, then function returns `0`, which specifies that the order of `a` and `b` should remain unchanged (not guaranteed).\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ascending;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {Array} output array\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push( v.value );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromIterator;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {StringArray} fields - tuple fields\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {Array} output array\n*/\nfunction fromIteratorMap( fields, it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tout.push( clbk.call( thisArg, v.value, i, fields[ i ] ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromIteratorMap;\n", "/* eslint-disable max-len, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isStringArray = require( '@stdlib/assert-is-string-array' ).primitives;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isArrayBuffer = require( '@stdlib/assert-is-arraybuffer' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar hasIteratorSymbolSupport = require( '@stdlib/assert-has-iterator-symbol-support' );\nvar propertiesIn = require( '@stdlib/utils-properties-in' );\nvar typedarray = require( '@stdlib/array-typed' );\nvar Int8Array = require( '@stdlib/array-int8' );\nvar getDtype = require( '@stdlib/array-dtype' );\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setNonEnumerableProperty = require( '@stdlib/utils-define-nonenumerable-property' );\nvar setNonEnumerableReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' ); // eslint-disable-line id-length\nvar setNonEnumerableReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' ); // eslint-disable-line id-length\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ITERATOR_SYMBOL = require( '@stdlib/symbol-iterator' );\nvar format = require( '@stdlib/string-format' );\nvar contains = require( './contains.js' );\nvar hasDistinctElements = require( './has_distinct_elements.js' );\nvar validate = require( './validate.js' );\nvar ascending = require( './ascending.js' );\nvar fromIterator = require( './from_iterator.js' );\nvar fromIteratorMap = require( './from_iterator_map.js' );\n\n\n// VARIABLES //\n\nvar RESERVED_PROPS = propertiesIn( new Int8Array( 0 ) );\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// MAIN //\n\n/**\n* Returns a named typed tuple factory.\n*\n* @param {StringArray} names - field (property) names\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @param {string} [options.name=\"tuple\"] - tuple name\n* @throws {TypeError} must provide an array of strings\n* @throws {TypeError} must provide distinct field names\n* @throws {Error} cannot provide a reserved field (property) name\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a recognized data type\n* @returns {Function} factory function\n*\n* @example\n* var point = factory( [ 'x', 'y' ] );\n*\n* var p = point( [ 1.0, -1.0 ] );\n*\n* var x = p[ 0 ];\n* // returns 1.0\n*\n* x = p.x;\n* // returns 1.0\n*\n* var y = p[ 1 ];\n* // returns -1.0\n*\n* y = p.y;\n* // returns -1.0\n*/\nfunction factory( names, options ) { // eslint-disable-line max-lines-per-function, stdlib/jsdoc-require-throws-tags\n\tvar nfields;\n\tvar fields;\n\tvar opts;\n\tvar err;\n\tvar i;\n\tif ( !isStringArray( names ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array of strings. Value: `%s`.', names ) );\n\t}\n\tif ( !hasDistinctElements( names ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Field names must be distinct. Value: `%s`.', names ) );\n\t}\n\tfields = names.slice();\n\tnfields = fields.length;\n\tfor ( i = 0; i < nfields; i++ ) {\n\t\tif ( contains( RESERVED_PROPS, fields[ i ] ) ) {\n\t\t\tthrow new Error( format( 'invalid argument. Provided field name is reserved. Name: `%s`.', fields[ i ] ) );\n\t\t}\n\t}\n\topts = {\n\t\t'dtype': 'float64',\n\t\t'name': 'tuple'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t* Returns a named typed tuple.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayLikeObject|ArrayBuffer|Iterable)} [arg] - a typed array, array-like object, buffer, or an iterable\n\t* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n\t* @param {string} [dtype] - data type\n\t* @throws {TypeError} must provide a recognized data type\n\t* @throws {RangeError} arguments must be compatible with tuple length\n\t* @returns {TypedArray} named typed tuple\n\t*/\n\tfunction namedtypedtuple() { // eslint-disable-line max-lines-per-function\n\t\tvar indices;\n\t\tvar dtype;\n\t\tvar nargs;\n\t\tvar tuple;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs <= 0 ) {\n\t\t\ttuple = typedarray( nfields, opts.dtype );\n\t\t} else if ( nargs === 1 ) {\n\t\t\tif ( isString( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ dtype ]\n\t\t\t\ttuple = typedarray( nfields, arguments[ 0 ] );\n\t\t\t} else if ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ ArrayBuffer ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, opts.dtype );\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], opts.dtype );\n\t\t\t}\n\t\t} else if ( nargs === 2 ) {\n\t\t\tif ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\tif ( isString( arguments[ 1 ] ) ) {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, dtype ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, arguments[ 1 ] );\n\t\t\t\t} else {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, byteOffset ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, opts.dtype );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable, dtype ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ] );\n\t\t\t}\n\t\t} else {\n\t\t\t// Arguments: [ ArrayBuffer, byteOffset, dtype ]\n\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, arguments[ 2 ] );\n\t\t}\n\t\tif ( tuple.length !== nfields ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Arguments are incompatible with the number of tuple fields. Number of fields: `%u`. Number of data elements: `%u`.', nfields, tuple.length ) );\n\t\t}\n\t\tdtype = getDtype( tuple );\n\n\t\tindices = []; // indirect index look-up table\n\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\tindices.push( i );\n\t\t\tsetNonEnumerableReadWriteAccessor( tuple, fields[ i ], getter( i ), setter( i ) );\n\t\t}\n\t\tsetNonEnumerableProperty( tuple, 'name', opts.name );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'fields', getFields );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'orderedFields', orderedFields );\n\n\t\t// Note: keep in alphabetical order\n\t\tsetNonEnumerableProperty( tuple, 'entries', entries );\n\t\tsetNonEnumerableProperty( tuple, 'every', every );\n\t\tsetNonEnumerableProperty( tuple, 'fieldOf', fieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'filter', filter );\n\t\tsetNonEnumerableProperty( tuple, 'find', find );\n\t\tsetNonEnumerableProperty( tuple, 'findIndex', findIndex );\n\t\tsetNonEnumerableProperty( tuple, 'findField', findField );\n\t\tsetNonEnumerableProperty( tuple, 'forEach', forEach );\n\t\tsetNonEnumerableProperty( tuple, 'ind2key', ind2key );\n\t\tsetNonEnumerableProperty( tuple, 'key2ind', key2ind );\n\t\tsetNonEnumerableProperty( tuple, 'keys', keys );\n\t\tsetNonEnumerableProperty( tuple, 'lastFieldOf', lastFieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'map', map );\n\t\tsetNonEnumerableProperty( tuple, 'reduce', reduce );\n\t\tsetNonEnumerableProperty( tuple, 'reduceRight', reduceRight );\n\t\tsetNonEnumerableProperty( tuple, 'reverse', reverse );\n\t\tsetNonEnumerableProperty( tuple, 'slice', slice );\n\t\tsetNonEnumerableProperty( tuple, 'some', some );\n\t\tsetNonEnumerableProperty( tuple, 'sort', sort );\n\t\tsetNonEnumerableProperty( tuple, 'subtuple', subtuple );\n\t\tsetNonEnumerableProperty( tuple, 'toJSON', toJSON );\n\t\tsetNonEnumerableProperty( tuple, 'toString', toString );\n\n\t\treturn tuple;\n\n\t\t/**\n\t\t* Returns an accessor to retrieve a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction getter( i ) {\n\t\t\treturn get;\n\n\t\t\t/**\n\t\t\t* Returns a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {number} tuple value\n\t\t\t*/\n\t\t\tfunction get() {\n\t\t\t\treturn tuple[ indices[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns an accessor to set a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction setter( i ) {\n\t\t\treturn set;\n\n\t\t\t/**\n\t\t\t* Sets a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {number} v - value to set\n\t\t\t*/\n\t\t\tfunction set( v ) {\n\t\t\t\ttuple[ indices[ i ] ] = v;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction getFields() {\n\t\t\treturn fields.slice();\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields in index order.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction orderedFields() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tout = fields.slice();\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fields[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// Note: keep functions which follow in alphabetical order\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple key-value pairs.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction entries() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ], tuple[ i ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.entries();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Tests whether all tuple elements pass a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if all elements pass\n\t\t*/\n\t\tfunction every( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( !bool ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element strictly equal to a search element.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=0] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction fieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 0 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', i ) );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple which includes those elements for which a predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t* -   If a predicate function does not return a truthy value for any tuple element, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - filter (predicate) function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction filter( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t\t\t}\n\t\t\ttmp = [];\n\t\t\tf = [];\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( f.length === nfields ) {\n\t\t\t\treturn namedtypedtuple( tmp, dtype );\n\t\t\t}\n\t\t\tif ( f.length ) {\n\t\t\t\treturn factory( f, opts )( tmp );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t* Returns the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(number|void)} tuple element\n\t\t*/\n\t\tfunction find( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn tuple[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction findField( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tf = fields[ indices[ i ] ];\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, f, tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the index of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {integer} tuple index or `-1`\n\t\t*/\n\t\tfunction findIndex( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Invokes a callback for each tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - function to invoke\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t*/\n\t\tfunction forEach( fcn, thisArg ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tfcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Converts a tuple index to a field name.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an out-of-bounds index, the function returns `undefined`.\n\t\t* -   If provided a negative tuple index, the function resolves the index relative to the last tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} ind - tuple index\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} must provide an integer\n\t\t* @returns {(string|void)} field name or undefined\n\t\t*/\n\t\tfunction ind2key( ind ) {\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isInteger( ind ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an integer. Value: `%s`.', ind ) );\n\t\t\t}\n\t\t\tif ( ind < 0 ) {\n\t\t\t\tind = nfields + ind;\n\t\t\t}\n\t\t\tif ( ind < 0 || ind >= nfields ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn fields[ indices[ ind ] ];\n\t\t}\n\n\t\t/**\n\t\t* Converts a field name to a tuple index.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an unknown field name, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {string} key - field name\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a string\n\t\t* @returns {integer} tuple index\n\t\t*/\n\t\tfunction key2ind( key ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isString( key ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', key ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tif ( fields[ indices[i] ] === key ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple keys.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction keys() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.keys();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the last tuple element strictly equal to a search element, iterating from right to left.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=-1] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction lastFieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 1 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', i ) );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\ti = nfields - 1;\n\t\t\t\t} else if ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = nfields - 1;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Maps each tuple element to an element in a new tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - map function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} new tuple\n\t\t*/\n\t\tfunction map( fcn, thisArg ) {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t\t\t}\n\t\t\tout = namedtypedtuple( dtype );\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduce( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = 0;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ 0 ];\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result, iterating from right to left.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduceRight( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = nfields - 1;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ nfields-1 ];\n\t\t\t\ti = nfields - 2;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Reverses a tuple **in-place**.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {TypedArray} reversed tuple\n\t\t*/\n\t\tfunction reverse() {\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tfor ( i = 0; i < floor( nfields/2 ); i++ ) {\n\t\t\t\tj = nfields - i - 1;\n\t\t\t\ttmp = tuple[ i ];\n\t\t\t\ttuple[ i ] = tuple[ j ];\n\t\t\t\ttuple[ j ] = tmp;\n\t\t\t}\n\t\t\t// Because the indices are bounded [0,nfields), we can use simple arithmetic to \"reverse\" index values in-place...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tindices[ i ] = nfields - indices[ i ] - 1;\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\n\t\t/**\n\t\t* Copies elements to a new tuple with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction slice( begin, end ) {\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', begin ) );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\ttmp = [];\n\t\t\tfor ( ; i < j; i++ ) {\n\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tmp, dtype );\n\t\t}\n\n\t\t/**\n\t\t* Tests whether at least one tuple element passes a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if at least one element passes\n\t\t*/\n\t\tfunction some( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t* Sorts a tuple in-place.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The comparison function is provided two tuple elements, `a` and `b`, per invocation, and its return value determines the sort order as follows:\n\t\t*\n\t\t*     -   If the comparison function returns a value **less** than zero, then the function sorts `a` to an index lower than `b` (i.e., `a` should come **before** `b`).\n\t\t*     -   If the comparison function returns a value **greater** than zero, then the function sorts `a` to an index higher than `b` (i.e., `b` should come **before** `a`).\n\t\t*     -   If the comparison function returns **zero**, then the relative order of `a` and `b` _should_ remain unchanged.\n\t\t*\n\t\t* -   Invoking this method does **not** affect tuple field assignments.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} [compareFunction] - function which specifies the sort order\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} sorted tuple\n\t\t*/\n\t\tfunction sort( compareFunction ) {\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\t\t\tvar v;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length ) {\n\t\t\t\tif ( !isFunction( compareFunction ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', compareFunction ) );\n\t\t\t\t}\n\t\t\t\tclbk = compareFunction;\n\t\t\t} else {\n\t\t\t\tclbk = ascending;\n\t\t\t}\n\t\t\tindices.sort( wrapper );\n\n\t\t\t// Create a temporary indices array which we'll reorder as we rearrange the tuple elements:\n\t\t\ttmp = indices.slice();\n\n\t\t\t// Rearrange tuple elements according to the rearranged indices (note: every \"move\" moves a tuple element to its desired position with runtime complexity O(N))...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t// Check if we need to move a tuple element:\n\t\t\t\tif ( tmp[ i ] !== i ) {\n\t\t\t\t\tv = tuple[ i ];\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = tmp[ j ];\n\n\t\t\t\t\t// Follow \"cycles\", stopping once we are back at index `i`...\n\t\t\t\t\twhile ( k !== i ) {\n\t\t\t\t\t\ttuple[ j ] = tuple[ k ];\n\t\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t\t\tj = k;\n\t\t\t\t\t\tk = tmp[ j ];\n\t\t\t\t\t}\n\t\t\t\t\ttuple[ j ] = v;\n\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\n\t\t\t/**\n\t\t\t* Wraps a comparison function to allow sorting the internal indices array rather than the tuple directly.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {NonNegativeInteger} ia - first index\n\t\t\t* @param {NonNegativeInteger} ib - second index\n\t\t\t* @returns {*} value specifying the sort order\n\t\t\t*/\n\t\t\tfunction wrapper( ia, ib ) {\n\t\t\t\tvar a = tuple[ indices[ ia ] ];\n\t\t\t\tvar b = tuple[ indices[ ib ] ];\n\t\t\t\treturn clbk( a, b );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple over the same underlying `ArrayBuffer` and with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction subtuple( begin, end ) {\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple.buffer, tuple.byteOffset, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an integer. Value: `%s`.', begin ) );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', end ) );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\tfor ( k = i; k < j; k++ ) {\n\t\t\t\tf.push( fields[ indices[k] ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tuple.buffer, tuple.byteOffset+(i*tuple.BYTES_PER_ELEMENT), dtype );\n\t\t}\n\n\t\t/**\n\t\t* Serializes a tuple as JSON.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {JSON} tuple JSON representation\n\t\t*/\n\t\tfunction toJSON() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tout = {};\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ fields[i] ] = tuple[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// TODO: consider adding `toLocaleString()` in a manner similar to `toString()` below\n\n\t\t/**\n\t\t* Serializes a tuple as a string.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {string} tuple string representation\n\t\t*/\n\t\tfunction toString() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not host tuple.' );\n\t\t\t}\n\t\t\tout = opts.name + '(';\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout += fields[ i ];\n\t\t\t\tout += '=';\n\t\t\t\tout += tuple[ indices[ i ] ];\n\t\t\t\tif ( i < nfields-1 ) {\n\t\t\t\t\tout += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t\tout += ')';\n\t\t\treturn out;\n\t\t}\n\t}\n\n\t// Note: keep the following methods in alphabetical order...\n\n\t/**\n\t* Creates a new tuple from an array-like object or an iterable.\n\t*\n\t* @private\n\t* @name from\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {(ArrayLikeObject|Iterable)} src - array-like object or iterable\n\t* @param {Function} [clbk] - callback to invoke for each source element\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an array-like object or an iterable\n\t* @throws {RangeError} source must be compatible with tuple length\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'from', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function from( src ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar it;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not the host tuple factory.' );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( isCollection( src ) ) {\n\t\t\t\tif ( src.length !== nfields ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Source is incompatible with the number of tuple fields. Number of fields: `%u`. Source length: `%u`.', nfields, src.length ) );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, src[ i ], i, fields[ i ] );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = src[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tit = src[ ITERATOR_SYMBOL ]();\n\t\t\t\tif ( !isFunction( it.next ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n\t\t\t\t}\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\ttmp = fromIteratorMap( fields, it, clbk, thisArg );\n\t\t\t\t} else {\n\t\t\t\t\ttmp = fromIterator( it );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( tmp, opts.dtype );\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.', src ) );\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from an object containing tuple fields.\n\t*\n\t* @private\n\t* @name fromObject\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {Object} obj - source object\n\t* @param {Function} [clbk] - callback to invoke for each source object tuple field\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an object\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'fromObject', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function fromObject( obj ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not the host tuple factory.' );\n\t\t\t}\n\t\t\tif ( obj === null || typeof obj !== 'object' ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', clbk ) );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\tif ( clbk ) {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, obj[ f ], f );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = obj[ f ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from a variable number of arguments.\n\t*\n\t* @private\n\t* @name of\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {...number} element - tuple elements\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {RangeError} incompatible number of arguments\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'of', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function of() { // eslint-disable-line no-restricted-syntax\n\t\t\tvar args;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( 'invalid invocation. `this` is not the host tuple factory.' );\n\t\t\t}\n\t\t\tif ( arguments.length !== nfields ) {\n\t\t\t\tthrow new RangeError( format( 'invalid invocation. Number of arguments is incompatible with the number of tuple fields. Number of fields: `%u`. Number of arguments: `%u`.', nfields, arguments.length ) );\n\t\t\t}\n\t\t\targs = [];\n\t\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\t\targs.push( arguments[ i ] );\n\t\t\t}\n\t\t\treturn namedtypedtuple( args );\n\t\t}\n\t});\n\n\treturn namedtypedtuple;\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Named typed tuple.\n*\n* @module @stdlib/utils-named-typed-tuple\n*\n* @example\n* var namedtypedtuple = require( '@stdlib/utils-named-typed-tuple' );\n*\n* var point = namedtypedtuple( [ 'x', 'y' ] );\n*\n* var p = point( [ 1.0, -1.0 ] );\n*\n* var x = p[ 0 ];\n* // returns 1.0\n*\n* x = p.x;\n* // returns 1.0\n*\n* var y = p[ 1 ];\n* // returns -1.0\n*\n* y = p.y;\n* // returns -1.0\n*/\n\n// MAIN //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_contains", "__commonJSMin", "exports", "module", "contains", "arr", "v", "i", "require_has_distinct_elements", "__commonJSMin", "exports", "module", "hasOwnProp", "hasDistinctElements", "arr", "obj", "i", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isString", "dtypes", "format", "contains", "DTYPES", "validate", "opts", "options", "require_ascending", "__commonJSMin", "exports", "module", "ascending", "a", "b", "require_from_iterator", "__commonJSMin", "exports", "module", "fromIterator", "it", "out", "v", "require_from_iterator_map", "__commonJSMin", "exports", "module", "fromIteratorMap", "fields", "it", "clbk", "thisArg", "out", "v", "i", "require_main", "__commonJSMin", "exports", "module", "isStringArray", "isString", "isArrayBuffer", "isFunction", "isInteger", "isObject", "isCollection", "hasOwnProp", "hasIteratorSymbolSupport", "propertiesIn", "typedarray", "Int8Array", "getDtype", "defineProperty", "setNonEnumerableProperty", "setNonEnumerableReadOnlyAccessor", "setNonEnumerableReadWriteAccessor", "floor", "ITERATOR_SYMBOL", "format", "contains", "hasDistinctElements", "validate", "ascending", "fromIterator", "fromIteratorMap", "RESERVED_PROPS", "HAS_ITERATOR_SYMBOL", "factory", "names", "options", "nfields", "fields", "opts", "err", "i", "namedtypedtuple", "indices", "dtype", "nargs", "tuple", "getter", "setter", "getFields", "orderedFields", "entries", "every", "fieldOf", "filter", "find", "findIndex", "findField", "forEach", "ind2key", "key2ind", "keys", "lastFieldOf", "map", "reduce", "reduceRight", "reverse", "slice", "some", "sort", "subtuple", "toJSON", "toString", "get", "set", "v", "out", "self", "iter", "FLG", "next", "end", "value", "predicate", "thisArg", "bool", "searchElement", "tmp", "f", "fcn", "ind", "key", "acc", "j", "begin", "compareFunction", "clbk", "k", "wrapper", "ia", "ib", "a", "b", "src", "it", "obj", "args", "main"]
}
