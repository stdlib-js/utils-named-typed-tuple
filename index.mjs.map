{"version":3,"file":"index.mjs","sources":["../lib/contains.js","../lib/validate.js","../lib/ascending.js","../lib/main.js","../lib/has_distinct_elements.js","../lib/from_iterator_map.js","../lib/from_iterator.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array contains a provided value.\n*\n* @private\n* @param {Array} arr - array\n* @param {*} v - search value\n* @returns {boolean} boolean indicating if an array contains a search value\n*/\nfunction contains( arr, v ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( arr[ i ] === v ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default contains;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport dtypes from '@stdlib/array-typed-dtypes';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport contains from './contains.js';\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - default data type\n* @param {string} [options.name] - tuple name\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64',\n*     'name': 'Complex128'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1Vp2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isString( opts.dtype ) ) {\n\t\t\treturn new TypeError( format( '1Vp2W', 'dtype', opts.dtype ) );\n\t\t}\n\t\tif ( !contains( DTYPES, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( '1VpBf', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t\tif ( !isString( opts.name ) ) {\n\t\t\treturn new TypeError( format( '1Vp2W', 'name', opts.name ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Specifies a sort order for ordering numeric values in ascending order.\n*\n* ## Notes\n*\n* -   If `a < b`, then function returns a number less than `0`, which specifies to sort `a` to an index lower than `b`.\n* -   If `a > b`, then function returns a number greater than `0`, which specifies to sort `a` to an index higher than `b`.\n* -   If `a == b`, then function returns `0`, which specifies that the order of `a` and `b` should remain unchanged (not guaranteed).\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\n\nexport default ascending;\n","/* eslint-disable max-len, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer';\nimport isFunction from '@stdlib/assert-is-function';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport propertiesIn from '@stdlib/utils-properties-in';\nimport typedarray from '@stdlib/array-typed';\nimport Int8Array from '@stdlib/array-int8';\nimport getDtype from '@stdlib/array-dtype';\nimport defineProperty from '@stdlib/utils-define-property';\nimport setNonEnumerableProperty from '@stdlib/utils-define-nonenumerable-property';\nimport setNonEnumerableReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor'; // eslint-disable-line id-length\nimport setNonEnumerableReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor'; // eslint-disable-line id-length\nimport floor from '@stdlib/math-base-special-floor';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport contains from './contains.js';\nimport hasDistinctElements from './has_distinct_elements.js';\nimport validate from './validate.js';\nimport ascending from './ascending.js';\nimport fromIterator from './from_iterator.js';\nimport fromIteratorMap from './from_iterator_map.js';\n\n\n// VARIABLES //\n\nvar RESERVED_PROPS = propertiesIn( new Int8Array( 0 ) );\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// MAIN //\n\n/**\n* Returns a named typed tuple factory.\n*\n* @param {StringArray} names - field (property) names\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @param {string} [options.name=\"tuple\"] - tuple name\n* @throws {TypeError} must provide an array of strings\n* @throws {TypeError} must provide distinct field names\n* @throws {Error} cannot provide a reserved field (property) name\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a recognized data type\n* @returns {Function} factory function\n*\n* @example\n* var point = factory( [ 'x', 'y' ] );\n*\n* var p = point( [ 1.0, -1.0 ] );\n*\n* var x = p[ 0 ];\n* // returns 1.0\n*\n* x = p.x;\n* // returns 1.0\n*\n* var y = p[ 1 ];\n* // returns -1.0\n*\n* y = p.y;\n* // returns -1.0\n*/\nfunction factory( names, options ) { // eslint-disable-line max-lines-per-function, stdlib/jsdoc-require-throws-tags\n\tvar nfields;\n\tvar fields;\n\tvar opts;\n\tvar err;\n\tvar i;\n\tif ( !isStringArray( names ) ) {\n\t\tthrow new TypeError( format( '1VpBZ', names ) );\n\t}\n\tif ( !hasDistinctElements( names ) ) {\n\t\tthrow new TypeError( format( '1VpBa', names ) );\n\t}\n\tfields = names.slice();\n\tnfields = fields.length;\n\tfor ( i = 0; i < nfields; i++ ) {\n\t\tif ( contains( RESERVED_PROPS, fields[ i ] ) ) {\n\t\t\tthrow new Error( format( '1VpBb', fields[ i ] ) );\n\t\t}\n\t}\n\topts = {\n\t\t'dtype': 'float64',\n\t\t'name': 'tuple'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t* Returns a named typed tuple.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayLikeObject|ArrayBuffer|Iterable)} [arg] - a typed array, array-like object, buffer, or an iterable\n\t* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n\t* @param {string} [dtype] - data type\n\t* @throws {TypeError} must provide a recognized data type\n\t* @throws {RangeError} arguments must be compatible with tuple length\n\t* @returns {TypedArray} named typed tuple\n\t*/\n\tfunction namedtypedtuple() { // eslint-disable-line max-lines-per-function\n\t\tvar indices;\n\t\tvar dtype;\n\t\tvar nargs;\n\t\tvar tuple;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs <= 0 ) {\n\t\t\ttuple = typedarray( nfields, opts.dtype );\n\t\t} else if ( nargs === 1 ) {\n\t\t\tif ( isString( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ dtype ]\n\t\t\t\ttuple = typedarray( nfields, arguments[ 0 ] );\n\t\t\t} else if ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ ArrayBuffer ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, opts.dtype );\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], opts.dtype );\n\t\t\t}\n\t\t} else if ( nargs === 2 ) {\n\t\t\tif ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\tif ( isString( arguments[ 1 ] ) ) {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, dtype ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, arguments[ 1 ] );\n\t\t\t\t} else {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, byteOffset ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, opts.dtype );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable, dtype ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ] );\n\t\t\t}\n\t\t} else {\n\t\t\t// Arguments: [ ArrayBuffer, byteOffset, dtype ]\n\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, arguments[ 2 ] );\n\t\t}\n\t\tif ( tuple.length !== nfields ) {\n\t\t\tthrow new RangeError( format( '1VpBc', nfields, tuple.length ) );\n\t\t}\n\t\tdtype = getDtype( tuple );\n\n\t\tindices = []; // indirect index look-up table\n\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\tindices.push( i );\n\t\t\tsetNonEnumerableReadWriteAccessor( tuple, fields[ i ], getter( i ), setter( i ) );\n\t\t}\n\t\tsetNonEnumerableProperty( tuple, 'name', opts.name );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'fields', getFields );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'orderedFields', orderedFields );\n\n\t\t// Note: keep in alphabetical order\n\t\tsetNonEnumerableProperty( tuple, 'entries', entries );\n\t\tsetNonEnumerableProperty( tuple, 'every', every );\n\t\tsetNonEnumerableProperty( tuple, 'fieldOf', fieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'filter', filter );\n\t\tsetNonEnumerableProperty( tuple, 'find', find );\n\t\tsetNonEnumerableProperty( tuple, 'findIndex', findIndex );\n\t\tsetNonEnumerableProperty( tuple, 'findField', findField );\n\t\tsetNonEnumerableProperty( tuple, 'forEach', forEach );\n\t\tsetNonEnumerableProperty( tuple, 'ind2key', ind2key );\n\t\tsetNonEnumerableProperty( tuple, 'key2ind', key2ind );\n\t\tsetNonEnumerableProperty( tuple, 'keys', keys );\n\t\tsetNonEnumerableProperty( tuple, 'lastFieldOf', lastFieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'map', map );\n\t\tsetNonEnumerableProperty( tuple, 'reduce', reduce );\n\t\tsetNonEnumerableProperty( tuple, 'reduceRight', reduceRight );\n\t\tsetNonEnumerableProperty( tuple, 'reverse', reverse );\n\t\tsetNonEnumerableProperty( tuple, 'slice', slice );\n\t\tsetNonEnumerableProperty( tuple, 'some', some );\n\t\tsetNonEnumerableProperty( tuple, 'sort', sort );\n\t\tsetNonEnumerableProperty( tuple, 'subtuple', subtuple );\n\t\tsetNonEnumerableProperty( tuple, 'toJSON', toJSON );\n\t\tsetNonEnumerableProperty( tuple, 'toString', toString );\n\n\t\treturn tuple;\n\n\t\t/**\n\t\t* Returns an accessor to retrieve a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction getter( i ) {\n\t\t\treturn get;\n\n\t\t\t/**\n\t\t\t* Returns a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {number} tuple value\n\t\t\t*/\n\t\t\tfunction get() {\n\t\t\t\treturn tuple[ indices[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns an accessor to set a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction setter( i ) {\n\t\t\treturn set;\n\n\t\t\t/**\n\t\t\t* Sets a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {number} v - value to set\n\t\t\t*/\n\t\t\tfunction set( v ) {\n\t\t\t\ttuple[ indices[ i ] ] = v;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction getFields() {\n\t\t\treturn fields.slice();\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields in index order.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction orderedFields() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tout = fields.slice();\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fields[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// Note: keep functions which follow in alphabetical order\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple key-value pairs.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction entries() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ], tuple[ i ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.entries();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Tests whether all tuple elements pass a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if all elements pass\n\t\t*/\n\t\tfunction every( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( !bool ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element strictly equal to a search element.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=0] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction fieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 0 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp7f', i ) );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple which includes those elements for which a predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t* -   If a predicate function does not return a truthy value for any tuple element, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - filter (predicate) function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction filter( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', predicate ) );\n\t\t\t}\n\t\t\ttmp = [];\n\t\t\tf = [];\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( f.length === nfields ) {\n\t\t\t\treturn namedtypedtuple( tmp, dtype );\n\t\t\t}\n\t\t\tif ( f.length ) {\n\t\t\t\treturn factory( f, opts )( tmp );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t* Returns the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(number|void)} tuple element\n\t\t*/\n\t\tfunction find( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn tuple[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction findField( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tf = fields[ indices[ i ] ];\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, f, tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the index of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {integer} tuple index or `-1`\n\t\t*/\n\t\tfunction findIndex( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Invokes a callback for each tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - function to invoke\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t*/\n\t\tfunction forEach( fcn, thisArg ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', fcn ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tfcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Converts a tuple index to a field name.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an out-of-bounds index, the function returns `undefined`.\n\t\t* -   If provided a negative tuple index, the function resolves the index relative to the last tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} ind - tuple index\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} must provide an integer\n\t\t* @returns {(string|void)} field name or undefined\n\t\t*/\n\t\tfunction ind2key( ind ) {\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isInteger( ind ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp8A', ind ) );\n\t\t\t}\n\t\t\tif ( ind < 0 ) {\n\t\t\t\tind = nfields + ind;\n\t\t\t}\n\t\t\tif ( ind < 0 || ind >= nfields ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn fields[ indices[ ind ] ];\n\t\t}\n\n\t\t/**\n\t\t* Converts a field name to a tuple index.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an unknown field name, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {string} key - field name\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a string\n\t\t* @returns {integer} tuple index\n\t\t*/\n\t\tfunction key2ind( key ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isString( key ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3F', key ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tif ( fields[ indices[i] ] === key ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple keys.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction keys() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.keys();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the last tuple element strictly equal to a search element, iterating from right to left.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=-1] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction lastFieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 1 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp7f', i ) );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\ti = nfields - 1;\n\t\t\t\t} else if ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = nfields - 1;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Maps each tuple element to an element in a new tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - map function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} new tuple\n\t\t*/\n\t\tfunction map( fcn, thisArg ) {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', fcn ) );\n\t\t\t}\n\t\t\tout = namedtypedtuple( dtype );\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduce( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', fcn ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = 0;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ 0 ];\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result, iterating from right to left.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduceRight( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', fcn ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = nfields - 1;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ nfields-1 ];\n\t\t\t\ti = nfields - 2;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Reverses a tuple **in-place**.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {TypedArray} reversed tuple\n\t\t*/\n\t\tfunction reverse() {\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tfor ( i = 0; i < floor( nfields/2 ); i++ ) {\n\t\t\t\tj = nfields - i - 1;\n\t\t\t\ttmp = tuple[ i ];\n\t\t\t\ttuple[ i ] = tuple[ j ];\n\t\t\t\ttuple[ j ] = tmp;\n\t\t\t}\n\t\t\t// Because the indices are bounded [0,nfields), we can use simple arithmetic to \"reverse\" index values in-place...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tindices[ i ] = nfields - indices[ i ] - 1;\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\n\t\t/**\n\t\t* Copies elements to a new tuple with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction slice( begin, end ) {\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp7e', begin ) );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp7f', end ) );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\ttmp = [];\n\t\t\tfor ( ; i < j; i++ ) {\n\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tmp, dtype );\n\t\t}\n\n\t\t/**\n\t\t* Tests whether at least one tuple element passes a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if at least one element passes\n\t\t*/\n\t\tfunction some( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3c', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t* Sorts a tuple in-place.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The comparison function is provided two tuple elements, `a` and `b`, per invocation, and its return value determines the sort order as follows:\n\t\t*\n\t\t*     -   If the comparison function returns a value **less** than zero, then the function sorts `a` to an index lower than `b` (i.e., `a` should come **before** `b`).\n\t\t*     -   If the comparison function returns a value **greater** than zero, then the function sorts `a` to an index higher than `b` (i.e., `b` should come **before** `a`).\n\t\t*     -   If the comparison function returns **zero**, then the relative order of `a` and `b` _should_ remain unchanged.\n\t\t*\n\t\t* -   Invoking this method does **not** affect tuple field assignments.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} [compareFunction] - function which specifies the sort order\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} sorted tuple\n\t\t*/\n\t\tfunction sort( compareFunction ) {\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\t\t\tvar v;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( arguments.length ) {\n\t\t\t\tif ( !isFunction( compareFunction ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp3c', compareFunction ) );\n\t\t\t\t}\n\t\t\t\tclbk = compareFunction;\n\t\t\t} else {\n\t\t\t\tclbk = ascending;\n\t\t\t}\n\t\t\tindices.sort( wrapper );\n\n\t\t\t// Create a temporary indices array which we'll reorder as we rearrange the tuple elements:\n\t\t\ttmp = indices.slice();\n\n\t\t\t// Rearrange tuple elements according to the rearranged indices (note: every \"move\" moves a tuple element to its desired position with runtime complexity O(N))...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t// Check if we need to move a tuple element:\n\t\t\t\tif ( tmp[ i ] !== i ) {\n\t\t\t\t\tv = tuple[ i ];\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = tmp[ j ];\n\n\t\t\t\t\t// Follow \"cycles\", stopping once we are back at index `i`...\n\t\t\t\t\twhile ( k !== i ) {\n\t\t\t\t\t\ttuple[ j ] = tuple[ k ];\n\t\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t\t\tj = k;\n\t\t\t\t\t\tk = tmp[ j ];\n\t\t\t\t\t}\n\t\t\t\t\ttuple[ j ] = v;\n\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\n\t\t\t/**\n\t\t\t* Wraps a comparison function to allow sorting the internal indices array rather than the tuple directly.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {NonNegativeInteger} ia - first index\n\t\t\t* @param {NonNegativeInteger} ib - second index\n\t\t\t* @returns {*} value specifying the sort order\n\t\t\t*/\n\t\t\tfunction wrapper( ia, ib ) {\n\t\t\t\tvar a = tuple[ indices[ ia ] ];\n\t\t\t\tvar b = tuple[ indices[ ib ] ];\n\t\t\t\treturn clbk( a, b );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple over the same underlying `ArrayBuffer` and with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction subtuple( begin, end ) {\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple.buffer, tuple.byteOffset, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( format( '1Vp7e', begin ) );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp7f', end ) );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\tfor ( k = i; k < j; k++ ) {\n\t\t\t\tf.push( fields[ indices[k] ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tuple.buffer, tuple.byteOffset+(i*tuple.BYTES_PER_ELEMENT), dtype );\n\t\t}\n\n\t\t/**\n\t\t* Serializes a tuple as JSON.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {JSON} tuple JSON representation\n\t\t*/\n\t\tfunction toJSON() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tout = {};\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ fields[i] ] = tuple[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// TODO: consider adding `toLocaleString()` in a manner similar to `toString()` below\n\n\t\t/**\n\t\t* Serializes a tuple as a string.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {string} tuple string representation\n\t\t*/\n\t\tfunction toString() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format('1Vp1m') );\n\t\t\t}\n\t\t\tout = opts.name + '(';\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout += fields[ i ];\n\t\t\t\tout += '=';\n\t\t\t\tout += tuple[ indices[ i ] ];\n\t\t\t\tif ( i < nfields-1 ) {\n\t\t\t\t\tout += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t\tout += ')';\n\t\t\treturn out;\n\t\t}\n\t}\n\n\t// Note: keep the following methods in alphabetical order...\n\n\t/**\n\t* Creates a new tuple from an array-like object or an iterable.\n\t*\n\t* @private\n\t* @name from\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {(ArrayLikeObject|Iterable)} src - array-like object or iterable\n\t* @param {Function} [clbk] - callback to invoke for each source element\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an array-like object or an iterable\n\t* @throws {RangeError} source must be compatible with tuple length\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'from', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function from( src ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar it;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( format('1Vp1n') );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp2H', clbk ) );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( isCollection( src ) ) {\n\t\t\t\tif ( src.length !== nfields ) {\n\t\t\t\t\tthrow new RangeError( format( '1VpBd', nfields, src.length ) );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, src[ i ], i, fields[ i ] );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = src[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tit = src[ ITERATOR_SYMBOL ]();\n\t\t\t\tif ( !isFunction( it.next ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp2J', src ) );\n\t\t\t\t}\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\ttmp = fromIteratorMap( fields, it, clbk, thisArg );\n\t\t\t\t} else {\n\t\t\t\t\ttmp = fromIterator( it );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( tmp, opts.dtype );\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( format( '1Vp2J', src ) );\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from an object containing tuple fields.\n\t*\n\t* @private\n\t* @name fromObject\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {Object} obj - source object\n\t* @param {Function} [clbk] - callback to invoke for each source object tuple field\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an object\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'fromObject', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function fromObject( obj ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( format('1Vp1n') );\n\t\t\t}\n\t\t\tif ( obj === null || typeof obj !== 'object' ) {\n\t\t\t\tthrow new TypeError( format( '1Vp3L', obj ) );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1Vp2H', clbk ) );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\tif ( clbk ) {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, obj[ f ], f );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = obj[ f ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from a variable number of arguments.\n\t*\n\t* @private\n\t* @name of\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {...number} element - tuple elements\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {RangeError} incompatible number of arguments\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'of', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function of() { // eslint-disable-line no-restricted-syntax\n\t\t\tvar args;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( format('1Vp1n') );\n\t\t\t}\n\t\t\tif ( arguments.length !== nfields ) {\n\t\t\t\tthrow new RangeError( format( '1VpBe', nfields, arguments.length ) );\n\t\t\t}\n\t\t\targs = [];\n\t\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\t\targs.push( arguments[ i ] );\n\t\t\t}\n\t\t\treturn namedtypedtuple( args );\n\t\t}\n\t});\n\n\treturn namedtypedtuple;\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\n\n\n// MAIN //\n\n/**\n* Tests if an array contains distinct elements.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {boolean} boolean indicating if an array contains distinct elements\n*/\nfunction hasDistinctElements( arr ) {\n\tvar obj;\n\tvar i;\n\n\tobj = {};\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( hasOwnProp( obj, arr[ i ] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tobj[ arr[i] ] = true;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default hasDistinctElements;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {StringArray} fields - tuple fields\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {Array} output array\n*/\nfunction fromIteratorMap( fields, it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tout.push( clbk.call( thisArg, v.value, i, fields[ i ] ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {Array} output array\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push( v.value );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n"],"names":["contains","arr","v","i","length","DTYPES","dtypes","ascending","a","b","RESERVED_PROPS","propertiesIn","Int8Array","HAS_ITERATOR_SYMBOL","hasIteratorSymbolSupport","factory","names","options","nfields","fields","opts","err","isStringArray","TypeError","format","obj","hasOwnProp","hasDistinctElements","slice","Error","dtype","name","arguments","isObject","isString","validate","namedtypedtuple","indices","nargs","tuple","typedarray","isArrayBuffer","RangeError","getDtype","push","setNonEnumerableReadWriteAccessor","getter","setter","setNonEnumerableProperty","setNonEnumerableReadOnlyAccessor","out","self","iter","FLG","this","defineProperty","configurable","enumerable","writable","value","next","done","ITERATOR_SYMBOL","entries","predicate","thisArg","isFunction","call","searchElement","isInteger","tmp","f","fcn","ind","key","keys","acc","j","floor","begin","end","compareFunction","clbk","k","sort","ia","ib","buffer","byteOffset","BYTES_PER_ELEMENT","src","it","isCollection","fromIteratorMap","fromIterator","args"],"mappings":";;moEA8BA,SAASA,EAAUC,EAAKC,GACvB,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC5B,GAAKF,EAAKE,KAAQD,EACjB,OAAO,EAGT,OAAO,CACR,CCNA,IAAIG,EAASC,ICIb,SAASC,EAAWC,EAAGC,GACtB,OAAOD,EAAIC,CACZ,CCgBA,IAAIC,EAAiBC,EAAc,IAAIC,EAAW,IAC9CC,EAAsBC,IAoC1B,SAASC,EAASC,EAAOC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAlB,EACJ,IAAMmB,EAAeN,GACpB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,IClED,SAA8Bf,GAC7B,IAAIwB,EACAtB,EAGJ,IADAsB,EAAM,CAAA,EACAtB,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAM,CAClC,GAAKuB,EAAYD,EAAKxB,EAAKE,IAC1B,OAAO,EAERsB,EAAKxB,EAAIE,KAAO,CAChB,CACD,OAAO,CACR,CDsDOwB,CAAqBX,GAC1B,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAIvC,IAFAG,EAASH,EAAMY,QACfV,EAAUC,EAAOf,OACXD,EAAI,EAAGA,EAAIe,EAASf,IACzB,GAAKH,EAAUU,EAAgBS,EAAQhB,IACtC,MAAM,IAAI0B,MAAOL,EAAQ,QAASL,EAAQhB,KAO5C,GAJAiB,EAAO,CACNU,MAAS,UACTC,KAAQ,SAEJC,UAAU5B,OAAS,IACvBiB,EFzDF,SAAmBD,EAAMH,GACxB,IAAMgB,EAAUhB,GACf,OAAO,IAAIM,UAAWC,EAAQ,QAASP,IAExC,GAAKS,EAAYT,EAAS,SAAY,CAErC,GADAG,EAAKU,MAAQb,EAAQa,OACfI,EAAUd,EAAKU,OACpB,OAAO,IAAIP,UAAWC,EAAQ,QAAS,QAASJ,EAAKU,QAEtD,IAAM9B,EAAUK,EAAQe,EAAKU,OAC5B,OAAO,IAAIP,UAAWC,EAAQ,QAAS,QAASJ,EAAKU,OAEtD,CACD,OAAKJ,EAAYT,EAAS,UACzBG,EAAKW,KAAOd,EAAQc,MACdG,EAAUd,EAAKW,OACb,IAAIR,UAAWC,EAAQ,QAAS,OAAQJ,EAAKW,OAG/C,IACR,CEqCQI,CAAUf,EAAMH,GACjBI,GACJ,MAAMA,EAeR,SAASe,IACR,IAAIC,EACAP,EACAQ,EACAC,EACApC,EAiCJ,IA7BCoC,GAFDD,EAAQN,UAAU5B,SACJ,EACLoC,EAAYtB,EAASE,EAAKU,OACb,IAAVQ,EACNJ,EAAUF,UAAW,IAEjBQ,EAAYtB,EAASc,UAAW,IAC7BS,EAAeT,UAAW,IAE7BQ,EAAYR,UAAW,GAAK,EAAGd,EAASE,EAAKU,OAG7CU,EAAYR,UAAW,GAAKZ,EAAKU,OAErB,IAAVQ,EACNG,EAAeT,UAAW,IACzBE,EAAUF,UAAW,IAEjBQ,EAAYR,UAAW,GAAK,EAAGd,EAASc,UAAW,IAGnDQ,EAAYR,UAAW,GAAKA,UAAW,GAAKd,EAASE,EAAKU,OAI3DU,EAAYR,UAAW,GAAKA,UAAW,IAIxCQ,EAAYR,UAAW,GAAKA,UAAW,GAAKd,EAASc,UAAW,KAE9D5B,SAAWc,EACrB,MAAM,IAAIwB,WAAYlB,EAAQ,QAASN,EAASqB,EAAMnC,SAKvD,IAHA0B,EAAQa,EAAUJ,GAElBF,EAAU,GACJlC,EAAI,EAAGA,EAAIe,EAASf,IACzBkC,EAAQO,KAAMzC,GACd0C,EAAmCN,EAAOpB,EAAQhB,GAAK2C,EAAQ3C,GAAK4C,EAAQ5C,IA8B7E,OA5BA6C,EAA0BT,EAAO,OAAQnB,EAAKW,MAC9CkB,EAAkCV,EAAO,UA8EzC,WACC,OAAOpB,EAAOS,OACd,IA/EDqB,EAAkCV,EAAO,iBAwFzC,WACC,IAAIW,EACA/C,EAEJ,IADA+C,EAAM/B,EAAOS,QACPzB,EAAI,EAAGA,EAAIe,EAASf,IACzB+C,EAAK/C,GAAMgB,EAAQkB,EAAQlC,IAE5B,OAAO+C,CACP,IA7FDF,EAA0BT,EAAO,WAyGjC,WACC,IAAIY,EACAC,EACAC,EACAlD,EAGJ,IADAgD,EAAOG,QACOf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAI7BrB,GAAK,EAILoD,EADAH,EAAO,CAAA,EACe,OAAQ,CAC7BI,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAASC,IAEVL,EAAgBH,EAAM,SAAU,CAC/BI,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAsCD,SAAcA,GAEb,GADAN,GAAM,EACDrB,UAAU5B,OACd,MAAO,CACNuD,MAASA,EACTE,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IA/CIhD,GACJ0C,EAAgBH,EAAMU,EAAiB,CACtCN,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAkDF,WACC,OAAOR,EAAKY,SACZ,IAjDD,OAAOX,EAQP,SAASQ,IAER,OADAzD,GAAK,EACAkD,GAAOlD,GAAKe,EACT,CACN2C,MAAQ,GAGH,CACNF,MAAS,CAAExD,EAAGgB,EAAQkB,EAASlC,IAAOoC,EAAOpC,IAC7C0D,MAAQ,EAET,CA+BD,IA9LDb,EAA0BT,EAAO,SA2MjC,SAAgByB,EAAWC,GAC1B,IACI9D,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYF,GACjB,MAAM,IAAIzC,UAAWC,EAAQ,QAASwC,IAEvC,IAAM7D,EAAI,EAAGA,EAAIe,EAASf,IAEzB,IADO6D,EAAUG,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,GAEpE,OAAO,EAGT,OAAO,CACP,IA1NDS,EAA0BT,EAAO,WA4OjC,SAAkB6B,GACjB,IAAIjE,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,GAAKQ,UAAU5B,OAAS,EAAI,CAE3B,IAAMiE,EADNlE,EAAI6B,UAAW,IAEd,MAAM,IAAIT,UAAWC,EAAQ,QAASrB,IAEvC,GAAKA,GAAKe,EACT,OAEIf,EAAI,IACRA,EAAIe,EAAUf,GACL,IACRA,EAAI,EAGV,MACIA,EAAI,EAEL,KAAQA,EAAIe,EAASf,IACpB,GAAKoC,EAAOpC,KAAQiE,EACnB,OAAOjD,EAAQkB,EAASlC,GAG1B,IAtQD6C,EAA0BT,EAAO,UAwRjC,SAAiByB,EAAWC,GAC3B,IACIK,EACAC,EACApE,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYF,GACjB,MAAM,IAAIzC,UAAWC,EAAQ,QAASwC,IAIvC,IAFAM,EAAM,GACNC,EAAI,GACEpE,EAAI,EAAGA,EAAIe,EAASf,IAClB6D,EAAUG,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,KAEpEgC,EAAE3B,KAAMzB,EAAQkB,EAAQlC,KACxBmE,EAAI1B,KAAML,EAAOpC,KAGnB,GAAKoE,EAAEnE,SAAWc,EACjB,OAAOkB,EAAiBkC,EAAKxC,GAE9B,GAAKyC,EAAEnE,OACN,OAAOW,EAASwD,EAAGnD,EAAZL,CAAoBuD,GAE5B,OAAO,IACP,IAlTDtB,EAA0BT,EAAO,QA+TjC,SAAeyB,EAAWC,GACzB,IACI9D,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYF,GACjB,MAAM,IAAIzC,UAAWC,EAAQ,QAASwC,IAEvC,IAAM7D,EAAI,EAAGA,EAAIe,EAASf,IAEzB,GADO6D,EAAUG,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,GAEpE,OAAOA,EAAOpC,EAGhB,IA7UD6C,EAA0BT,EAAO,aAgYjC,SAAoByB,EAAWC,GAC9B,IACI9D,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYF,GACjB,MAAM,IAAIzC,UAAWC,EAAQ,QAASwC,IAEvC,IAAM7D,EAAI,EAAGA,EAAIe,EAASf,IAEzB,GADO6D,EAAUG,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,GAEpE,OAAOpC,EAGT,OAAQ,CACR,IA/YD6C,EAA0BT,EAAO,aA6VjC,SAAoByB,EAAWC,GAC9B,IACIM,EACApE,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYF,GACjB,MAAM,IAAIzC,UAAWC,EAAQ,QAASwC,IAEvC,IAAM7D,EAAI,EAAGA,EAAIe,EAASf,IAGzB,GAFAoE,EAAIpD,EAAQkB,EAASlC,IACd6D,EAAUG,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGoE,EAAGhC,GAEjD,OAAOgC,CAGT,IA7WDvB,EAA0BT,EAAO,WA0ZjC,SAAkBiC,EAAKP,GACtB,IAAI9D,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYM,GACjB,MAAM,IAAIjD,UAAWC,EAAQ,QAASgD,IAEvC,IAAMrE,EAAI,EAAGA,EAAIe,EAASf,IACzBqE,EAAIL,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,EAEzD,IApaDS,EAA0BT,EAAO,WAqbjC,SAAkBkC,GACjB,GAAKnB,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM6C,EAAWI,GAChB,MAAM,IAAIlD,UAAWC,EAAQ,QAASiD,IAElCA,EAAM,IACVA,EAAMvD,EAAUuD,GAEjB,GAAKA,EAAM,GAAKA,GAAOvD,EACtB,OAED,OAAOC,EAAQkB,EAASoC,GACxB,IAlcDzB,EAA0BT,EAAO,WAkdjC,SAAkBmC,GACjB,IAAIvE,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAMU,EAAUwC,GACf,MAAM,IAAInD,UAAWC,EAAQ,QAASkD,IAEvC,IAAMvE,EAAI,EAAGA,EAAIe,EAASf,IACzB,GAAKgB,EAAQkB,EAAQlC,MAASuE,EAC7B,OAAOvE,EAGT,OAAQ,CACR,IA/dD6C,EAA0BT,EAAO,QAyejC,WACC,IAAIY,EACAC,EACAC,EACAlD,EAGJ,IADAgD,EAAOG,QACOf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAI7BrB,GAAK,EAILoD,EADAH,EAAO,CAAA,EACe,OAAQ,CAC7BI,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAASC,IAEVL,EAAgBH,EAAM,SAAU,CAC/BI,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAsCD,SAAcA,GAEb,GADAN,GAAM,EACDrB,UAAU5B,OACd,MAAO,CACNuD,MAASA,EACTE,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IA/CIhD,GACJ0C,EAAgBH,EAAMU,EAAiB,CACtCN,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAkDF,WACC,OAAOR,EAAKwB,MACZ,IAjDD,OAAOvB,EAQP,SAASQ,IAER,OADAzD,GAAK,EACAkD,GAAOlD,GAAKe,EACT,CACN2C,MAAQ,GAGH,CACNF,MAAS,CAAExD,EAAGgB,EAAQkB,EAASlC,KAC/B0D,MAAQ,EAET,CA+BD,IA9jBDb,EAA0BT,EAAO,eAglBjC,SAAsB6B,GACrB,IAAIjE,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,GAAKQ,UAAU5B,OAAS,EAAI,CAE3B,IAAMiE,EADNlE,EAAI6B,UAAW,IAEd,MAAM,IAAIT,UAAWC,EAAQ,QAASrB,IAEvC,GAAKA,GAAKe,EACTf,EAAIe,EAAU,OACR,GAAKf,EAAI,IACfA,EAAIe,EAAUf,GACL,EACR,MAGN,MACIA,EAAIe,EAAU,EAEf,KAAQf,GAAK,EAAGA,IACf,GAAKoC,EAAOpC,KAAQiE,EACnB,OAAOjD,EAAQkB,EAASlC,GAG1B,IAzmBD6C,EAA0BT,EAAO,OA0nBjC,SAAciC,EAAKP,GAClB,IAAIf,EACA/C,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYM,GACjB,MAAM,IAAIjD,UAAWC,EAAQ,QAASgD,IAGvC,IADAtB,EAAMd,EAAiBN,GACjB3B,EAAI,EAAGA,EAAIe,EAASf,IACzB+C,EAAK/C,GAAMqE,EAAIL,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,GAEpE,OAAOW,CACP,IAvoBDF,EAA0BT,EAAO,UAopBjC,SAAiBiC,GAChB,IAAII,EACAzE,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYM,GACjB,MAAM,IAAIjD,UAAWC,EAAQ,QAASgD,IAElCxC,UAAU5B,OAAS,GACvBwE,EAAM5C,UAAW,GACjB7B,EAAI,IAEJyE,EAAMrC,EAAO,GACbpC,EAAI,GAEL,KAAQA,EAAIe,EAASf,IACpByE,EAAMJ,EAAKI,EAAKrC,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,GAEtD,OAAOqC,CACP,IAvqBD5B,EAA0BT,EAAO,eAorBjC,SAAsBiC,GACrB,IAAII,EACAzE,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYM,GACjB,MAAM,IAAIjD,UAAWC,EAAQ,QAASgD,IAElCxC,UAAU5B,OAAS,GACvBwE,EAAM5C,UAAW,GACjB7B,EAAIe,EAAU,IAEd0D,EAAMrC,EAAOrB,EAAQ,GACrBf,EAAIe,EAAU,GAEf,KAAQf,GAAK,EAAGA,IACfyE,EAAMJ,EAAKI,EAAKrC,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,GAEtD,OAAOqC,CACP,IAvsBD5B,EAA0BT,EAAO,WAitBjC,WACC,IAAI+B,EACAnE,EACA0E,EACJ,GAAKvB,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAMrB,EAAI,EAAGA,EAAI2E,EAAO5D,EAAQ,GAAKf,IACpC0E,EAAI3D,EAAUf,EAAI,EAClBmE,EAAM/B,EAAOpC,GACboC,EAAOpC,GAAMoC,EAAOsC,GACpBtC,EAAOsC,GAAMP,EAGd,IAAMnE,EAAI,EAAGA,EAAIe,EAASf,IACzBkC,EAASlC,GAAMe,EAAUmB,EAASlC,GAAM,EAEzC,OAAOoC,CACP,IAluBDS,EAA0BT,EAAO,SAovBjC,SAAgBwC,EAAOC,GACtB,IAAIV,EACAC,EACApE,EACA0E,EAEJ,GAAKvB,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,GAA0B,IAArBQ,UAAU5B,OACd,OAAOgC,EAAiBG,EAAOT,GAGhC,GADA3B,EAAI4E,GACEV,EAAWlE,GAChB,MAAM,IAAIoB,UAAWC,EAAQ,QAASuD,IAElC5E,EAAI,IACRA,EAAIe,EAAUf,GACL,IACRA,EAAI,GAGN,GAA0B,IAArB6B,UAAU5B,OACdyE,EAAI3D,MACE,CAEN,IAAMmD,EADNQ,EAAIG,GAEH,MAAM,IAAIzD,UAAWC,EAAQ,QAASwD,IAElCH,EAAI,GACRA,EAAI3D,EAAU2D,GACL,IACRA,EAAI,GAEMA,EAAI3D,IACf2D,EAAI3D,EAEL,CACD,GAAKf,GAAK0E,EACT,OAAO,KAIR,IAFAN,EAAI,GACJD,EAAM,GACEnE,EAAI0E,EAAG1E,IACdoE,EAAE3B,KAAMzB,EAAQkB,EAAQlC,KACxBmE,EAAI1B,KAAML,EAAOpC,IAElB,OAAOY,EAASwD,EAAGnD,EAAZL,CAAoBuD,EAAKxC,EAChC,IAnyBDkB,EAA0BT,EAAO,QAgzBjC,SAAeyB,EAAWC,GACzB,IACI9D,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,IAAM0C,EAAYF,GACjB,MAAM,IAAIzC,UAAWC,EAAQ,QAASwC,IAEvC,IAAM7D,EAAI,EAAGA,EAAIe,EAASf,IAEzB,GADO6D,EAAUG,KAAMF,EAAS1B,EAAOpC,GAAKA,EAAGgB,EAAQkB,EAAQlC,IAAMoC,GAEpE,OAAO,EAGT,OAAO,CACP,IA/zBDS,EAA0BT,EAAO,QAq1BjC,SAAe0C,GACd,IAAIC,EACAZ,EACAnE,EACA0E,EACAM,EACAjF,EACJ,GAAKoD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,GAAKQ,UAAU5B,OAAS,CACvB,IAAM8D,EAAYe,GACjB,MAAM,IAAI1D,UAAWC,EAAQ,QAASyD,IAEvCC,EAAOD,CACX,MACIC,EAAO3E,EAQR,IANA8B,EAAQ+C,MAkCR,SAAkBC,EAAIC,GACrB,IAAI9E,EAAI+B,EAAOF,EAASgD,IACpB5E,EAAI8B,EAAOF,EAASiD,IACxB,OAAOJ,EAAM1E,EAAGC,EAChB,IAnCD6D,EAAMjC,EAAQT,QAGRzB,EAAI,EAAGA,EAAIe,EAASf,IAEzB,GAAKmE,EAAKnE,KAAQA,EAAI,CAMrB,IALAD,EAAIqC,EAAOpC,GAEXgF,EAAIb,EADJO,EAAI1E,GAIIgF,IAAMhF,GACboC,EAAOsC,GAAMtC,EAAO4C,GACpBb,EAAKO,GAAMA,EAEXM,EAAIb,EADJO,EAAIM,GAGL5C,EAAOsC,GAAM3E,EACboE,EAAKO,GAAMA,CACX,CAEF,OAAOtC,CAeP,IA74BDS,EAA0BT,EAAO,YA+5BjC,SAAmBwC,EAAOC,GACzB,IAAIT,EACApE,EACA0E,EACAM,EAEJ,GAAK7B,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAE7B,GAA0B,IAArBQ,UAAU5B,OACd,OAAOgC,EAAiBG,EAAMgD,OAAQhD,EAAMiD,WAAY1D,GAGzD,GADA3B,EAAI4E,GACEV,EAAWlE,GAChB,MAAM,IAAIoB,UAAWC,EAAQ,QAASuD,IAElC5E,EAAI,IACRA,EAAIe,EAAUf,GACL,IACRA,EAAI,GAGN,GAA0B,IAArB6B,UAAU5B,OACdyE,EAAI3D,MACE,CAEN,IAAMmD,EADNQ,EAAIG,GAEH,MAAM,IAAIzD,UAAWC,EAAQ,QAASwD,IAElCH,EAAI,GACRA,EAAI3D,EAAU2D,GACL,IACRA,EAAI,GAEMA,EAAI3D,IACf2D,EAAI3D,EAEL,CACD,GAAKf,GAAK0E,EACT,OAAO,KAGR,IADAN,EAAI,GACEY,EAAIhF,EAAGgF,EAAIN,EAAGM,IACnBZ,EAAE3B,KAAMzB,EAAQkB,EAAQ8C,KAEzB,OAAOpE,EAASwD,EAAGnD,EAAZL,CAAoBwB,EAAMgD,OAAQhD,EAAMiD,WAAYrF,EAAEoC,EAAMkD,kBAAoB3D,EACvF,IA58BDkB,EAA0BT,EAAO,UAs9BjC,WACC,IAAIW,EACA/C,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAG7B,IADA0B,EAAM,CAAA,EACA/C,EAAI,EAAGA,EAAIe,EAASf,IACzB+C,EAAK/B,EAAOhB,IAAOoC,EAAOF,EAAQlC,IAEnC,OAAO+C,CACP,IAh+BDF,EAA0BT,EAAO,YA4+BjC,WACC,IAAIW,EACA/C,EACJ,GAAKmD,OAASf,EACb,MAAM,IAAIhB,UAAWC,EAAO,UAG7B,IADA0B,EAAM9B,EAAKW,KAAO,IACZ5B,EAAI,EAAGA,EAAIe,EAASf,IACzB+C,GAAO/B,EAAQhB,GACf+C,GAAO,IACPA,GAAOX,EAAOF,EAASlC,IAClBA,EAAIe,EAAQ,IAChBgC,GAAO,MAIT,OADAA,GAAO,GAEP,IA3/BMX,EASP,SAASO,EAAQ3C,GAChB,OAQA,WACC,OAAOoC,EAAOF,EAASlC,GACvB,CACD,CASD,SAAS4C,EAAQ5C,GAChB,OAQA,SAAcD,GACbqC,EAAOF,EAASlC,IAAQD,CACxB,CACD,CAk9BD,CA4KD,OAxJAqD,EAAgBnB,EAAiB,OAAQ,CACxCoB,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAAS,SAAe+B,GACvB,IAAIzB,EACA3B,EACAC,EACA2C,EACAZ,EACAqB,EACAxF,EACJ,GAAKmD,OAASlB,EACb,MAAM,IAAIb,UAAWC,EAAO,UAG7B,IADAc,EAAQN,UAAU5B,QACL,EAAI,CAEhB,IAAM8D,EADNgB,EAAOlD,UAAW,IAEjB,MAAM,IAAIT,UAAWC,EAAQ,QAAS0D,IAElC5C,EAAQ,IACZ2B,EAAUjC,UAAW,GAEtB,CACD,GAAK4D,EAAcF,GAAQ,CAC1B,GAAKA,EAAItF,SAAWc,EACnB,MAAM,IAAIwB,WAAYlB,EAAQ,QAASN,EAASwE,EAAItF,SAGrD,GADAmC,EAAQH,EAAiBlB,EAASE,EAAKU,OAClCoD,EACJ,IAAM/E,EAAI,EAAGA,EAAIe,EAASf,IACzBoC,EAAOpC,GAAM+E,EAAKf,KAAMF,EAASyB,EAAKvF,GAAKA,EAAGgB,EAAQhB,SAGvD,IAAMA,EAAI,EAAGA,EAAIe,EAASf,IACzBoC,EAAOpC,GAAMuF,EAAKvF,EAGxB,KAAU,MAAK8B,EAAUyD,IAAS7E,GAAuBqD,EAAYwB,EAAK5B,KAYtE,MAAM,IAAIvC,UAAWC,EAAQ,QAASkE,IAVtC,GADAC,EAAKD,EAAK5B,MACJI,EAAYyB,EAAG/B,MACpB,MAAM,IAAIrC,UAAWC,EAAQ,QAASkE,IAGtCpB,EADIY,EE5uCT,SAA0B/D,EAAQwE,EAAIT,EAAMjB,GAC3C,IAAIf,EACAhD,EACAC,EAIJ,IAFA+C,EAAM,GACN/C,GAAK,IAEJD,EAAIyF,EAAG/B,QACAC,MAGP1D,GAAK,EACL+C,EAAIN,KAAMsC,EAAKf,KAAMF,EAAS/D,EAAEyD,MAAOxD,EAAGgB,EAAQhB,KAEnD,OAAO+C,CACR,CF6tCW2C,CAAiB1E,EAAQwE,EAAIT,EAAMjB,GGhvC9C,SAAuB0B,GACtB,IAAIzC,EACAhD,EAGJ,IADAgD,EAAM,KAELhD,EAAIyF,EAAG/B,QACAC,MAGPX,EAAIN,KAAM1C,EAAEyD,OAEb,OAAOT,CACR,CHquCW4C,CAAcH,GAErBpD,EAAQH,EAAiBkC,EAAKlD,EAAKU,MAGnC,CACD,OAAOS,CACP,IAkBFgB,EAAgBnB,EAAiB,aAAc,CAC9CoB,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAAS,SAAqBlC,GAC7B,IAAIwC,EACA3B,EACAC,EACA2C,EACAX,EACApE,EACJ,GAAKmD,OAASlB,EACb,MAAM,IAAIb,UAAWC,EAAO,UAE7B,GAAa,OAARC,GAA+B,iBAARA,EAC3B,MAAM,IAAIF,UAAWC,EAAQ,QAASC,IAGvC,IADAa,EAAQN,UAAU5B,QACL,EAAI,CAEhB,IAAM8D,EADNgB,EAAOlD,UAAW,IAEjB,MAAM,IAAIT,UAAWC,EAAQ,QAAS0D,IAElC5C,EAAQ,IACZ2B,EAAUjC,UAAW,GAEtB,CAED,GADAO,EAAQH,EAAiBlB,EAASE,EAAKU,OAClCoD,EACJ,IAAM/E,EAAI,EAAGA,EAAIe,EAASf,IACzBoE,EAAIpD,EAAQhB,GACPuB,EAAYD,EAAK8C,KACrBhC,EAAOpC,GAAM+E,EAAKf,KAAMF,EAASxC,EAAK8C,GAAKA,SAI7C,IAAMpE,EAAI,EAAGA,EAAIe,EAASf,IACzBoE,EAAIpD,EAAQhB,GACPuB,EAAYD,EAAK8C,KACrBhC,EAAOpC,GAAMsB,EAAK8C,IAIrB,OAAOhC,CACP,IAeFgB,EAAgBnB,EAAiB,KAAM,CACtCoB,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZC,MAAS,WACR,IAAIoC,EACA5F,EACJ,GAAKmD,OAASlB,EACb,MAAM,IAAIb,UAAWC,EAAO,UAE7B,GAAKQ,UAAU5B,SAAWc,EACzB,MAAM,IAAIwB,WAAYlB,EAAQ,QAASN,EAASc,UAAU5B,SAG3D,IADA2F,EAAO,GACD5F,EAAI,EAAGA,EAAI6B,UAAU5B,OAAQD,IAClC4F,EAAKnD,KAAMZ,UAAW7B,IAEvB,OAAOiC,EAAiB2D,EACxB,IAGK3D,CACR"}