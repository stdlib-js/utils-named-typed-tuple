{"version":3,"file":"index.mjs","sources":["../lib/contains.js","../lib/has_distinct_elements.js","../lib/validate.js","../lib/ascending.js","../lib/from_iterator.js","../lib/from_iterator_map.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns a boolean indicating if an array contains a provided value.\n*\n* @private\n* @param {Array} arr - array\n* @param {*} v - search value\n* @returns {boolean} boolean indicating if an array contains a search value\n*/\nfunction contains( arr, v ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( arr[ i ] === v ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nexport default contains;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\n\n\n// MAIN //\n\n/**\n* Tests if an array contains distinct elements.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {boolean} boolean indicating if an array contains distinct elements\n*/\nfunction hasDistinctElements( arr ) {\n\tvar obj;\n\tvar i;\n\n\tobj = {};\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( hasOwnProp( obj, arr[ i ] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tobj[ arr[i] ] = true;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default hasDistinctElements;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport dtypes from '@stdlib/array-typed-dtypes' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport contains from './contains.js' ;\n\n\n// VARIABLES //\n\nvar DTYPES = dtypes();\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - default data type\n* @param {string} [options.name] - tuple name\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64',\n*     'name': 'Complex128'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0kl2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !isString( opts.dtype ) ) {\n\t\t\treturn new TypeError( format( '0kl2i', 'dtype', opts.dtype ) );\n\t\t}\n\t\tif ( !contains( DTYPES, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( '0kl5O', 'dtype', opts.dtype ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'name' ) ) {\n\t\topts.name = options.name;\n\t\tif ( !isString( opts.name ) ) {\n\t\t\treturn new TypeError( format( '0kl2i', 'name', opts.name ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Specifies a sort order for ordering numeric values in ascending order.\n*\n* ## Notes\n*\n* -   If `a < b`, then function returns a number less than `0`, which specifies to sort `a` to an index lower than `b`.\n* -   If `a > b`, then function returns a number greater than `0`, which specifies to sort `a` to an index higher than `b`.\n* -   If `a == b`, then function returns `0`, which specifies that the order of `a` and `b` should remain unchanged (not guaranteed).\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\n\nexport default ascending;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {Array} output array\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push( v.value );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {StringArray} fields - tuple fields\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {Array} output array\n*/\nfunction fromIteratorMap( fields, it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tout.push( clbk.call( thisArg, v.value, i, fields[ i ] ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/* eslint-disable max-len, max-lines */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isStringArray } from '@stdlib/assert-is-string-array' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport isArrayBuffer from '@stdlib/assert-is-arraybuffer' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer' ;\nimport isObject from '@stdlib/assert-is-object' ;\nimport isCollection from '@stdlib/assert-is-collection' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support' ;\nimport propertiesIn from '@stdlib/utils-properties-in' ;\nimport typedarray from '@stdlib/array-typed' ;\nimport Int8Array from '@stdlib/array-int8' ;\nimport getDtype from '@stdlib/array-dtype' ;\nimport defineProperty from '@stdlib/utils-define-property' ;\nimport setNonEnumerableProperty from '@stdlib/utils-define-nonenumerable-property' ;\nimport setNonEnumerableReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ; // eslint-disable-line id-length\nimport setNonEnumerableReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor' ; // eslint-disable-line id-length\nimport floor from '@stdlib/math-base-special-floor' ;\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport contains from './contains.js' ;\nimport hasDistinctElements from './has_distinct_elements.js' ;\nimport validate from './validate.js' ;\nimport ascending from './ascending.js' ;\nimport fromIterator from './from_iterator.js' ;\nimport fromIteratorMap from './from_iterator_map.js' ;\n\n\n// VARIABLES //\n\nvar RESERVED_PROPS = propertiesIn( new Int8Array( 0 ) );\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\n\n\n// MAIN //\n\n/**\n* Returns a named typed tuple factory.\n*\n* @param {StringArray} names - field (property) names\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - default data type\n* @param {string} [options.name=\"tuple\"] - tuple name\n* @throws {TypeError} must provide an array of strings\n* @throws {TypeError} must provide distinct field names\n* @throws {Error} cannot provide a reserved field (property) name\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a recognized data type\n* @returns {Function} factory function\n*\n* @example\n* var point = factory( [ 'x', 'y' ] );\n*\n* var p = point( [ 1.0, -1.0 ] );\n*\n* var x = p[ 0 ];\n* // returns 1.0\n*\n* x = p.x;\n* // returns 1.0\n*\n* var y = p[ 1 ];\n* // returns -1.0\n*\n* y = p.y;\n* // returns -1.0\n*/\nfunction factory( names, options ) { // eslint-disable-line max-lines-per-function, stdlib/jsdoc-require-throws-tags\n\tvar nfields;\n\tvar fields;\n\tvar opts;\n\tvar err;\n\tvar i;\n\tif ( !isStringArray( names ) ) {\n\t\tthrow new TypeError( format( '0klCM', names ) );\n\t}\n\tif ( !hasDistinctElements( names ) ) {\n\t\tthrow new TypeError( format( '0klCN', names ) );\n\t}\n\tfields = names.slice();\n\tnfields = fields.length;\n\tfor ( i = 0; i < nfields; i++ ) {\n\t\tif ( contains( RESERVED_PROPS, fields[ i ] ) ) {\n\t\t\tthrow new Error( format( '0klCO', fields[ i ] ) );\n\t\t}\n\t}\n\topts = {\n\t\t'dtype': 'float64',\n\t\t'name': 'tuple'\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t* Returns a named typed tuple.\n\t*\n\t* @private\n\t* @param {(TypedArray|ArrayLikeObject|ArrayBuffer|Iterable)} [arg] - a typed array, array-like object, buffer, or an iterable\n\t* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n\t* @param {string} [dtype] - data type\n\t* @throws {TypeError} must provide a recognized data type\n\t* @throws {RangeError} arguments must be compatible with tuple length\n\t* @returns {TypedArray} named typed tuple\n\t*/\n\tfunction namedtypedtuple() { // eslint-disable-line max-lines-per-function\n\t\tvar indices;\n\t\tvar dtype;\n\t\tvar nargs;\n\t\tvar tuple;\n\t\tvar i;\n\n\t\tnargs = arguments.length;\n\t\tif ( nargs <= 0 ) {\n\t\t\ttuple = typedarray( nfields, opts.dtype );\n\t\t} else if ( nargs === 1 ) {\n\t\t\tif ( isString( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ dtype ]\n\t\t\t\ttuple = typedarray( nfields, arguments[ 0 ] );\n\t\t\t} else if ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\t// Arguments: [ ArrayBuffer ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, opts.dtype );\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], opts.dtype );\n\t\t\t}\n\t\t} else if ( nargs === 2 ) {\n\t\t\tif ( isArrayBuffer( arguments[ 0 ] ) ) {\n\t\t\t\tif ( isString( arguments[ 1 ] ) ) {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, dtype ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], 0, nfields, arguments[ 1 ] );\n\t\t\t\t} else {\n\t\t\t\t\t// Arguments: [ ArrayBuffer, byteOffset ]\n\t\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, opts.dtype );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Arguments: [ TypedArray|ArrayLikeObject|Iterable, dtype ]\n\t\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ] );\n\t\t\t}\n\t\t} else {\n\t\t\t// Arguments: [ ArrayBuffer, byteOffset, dtype ]\n\t\t\ttuple = typedarray( arguments[ 0 ], arguments[ 1 ], nfields, arguments[ 2 ] );\n\t\t}\n\t\tif ( tuple.length !== nfields ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. Arguments are incompatible with the number of tuple fields. Number of fields: `%u`. Number of data elements: `%u`.', nfields, tuple.length ) );\n\t\t}\n\t\tdtype = getDtype( tuple );\n\n\t\tindices = []; // indirect index look-up table\n\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\tindices.push( i );\n\t\t\tsetNonEnumerableReadWriteAccessor( tuple, fields[ i ], getter( i ), setter( i ) );\n\t\t}\n\t\tsetNonEnumerableProperty( tuple, 'name', opts.name );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'fields', getFields );\n\t\tsetNonEnumerableReadOnlyAccessor( tuple, 'orderedFields', orderedFields );\n\n\t\t// Note: keep in alphabetical order\n\t\tsetNonEnumerableProperty( tuple, 'entries', entries );\n\t\tsetNonEnumerableProperty( tuple, 'every', every );\n\t\tsetNonEnumerableProperty( tuple, 'fieldOf', fieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'filter', filter );\n\t\tsetNonEnumerableProperty( tuple, 'find', find );\n\t\tsetNonEnumerableProperty( tuple, 'findIndex', findIndex );\n\t\tsetNonEnumerableProperty( tuple, 'findField', findField );\n\t\tsetNonEnumerableProperty( tuple, 'forEach', forEach );\n\t\tsetNonEnumerableProperty( tuple, 'ind2key', ind2key );\n\t\tsetNonEnumerableProperty( tuple, 'key2ind', key2ind );\n\t\tsetNonEnumerableProperty( tuple, 'keys', keys );\n\t\tsetNonEnumerableProperty( tuple, 'lastFieldOf', lastFieldOf );\n\t\tsetNonEnumerableProperty( tuple, 'map', map );\n\t\tsetNonEnumerableProperty( tuple, 'reduce', reduce );\n\t\tsetNonEnumerableProperty( tuple, 'reduceRight', reduceRight );\n\t\tsetNonEnumerableProperty( tuple, 'reverse', reverse );\n\t\tsetNonEnumerableProperty( tuple, 'slice', slice );\n\t\tsetNonEnumerableProperty( tuple, 'some', some );\n\t\tsetNonEnumerableProperty( tuple, 'sort', sort );\n\t\tsetNonEnumerableProperty( tuple, 'subtuple', subtuple );\n\t\tsetNonEnumerableProperty( tuple, 'toJSON', toJSON );\n\t\tsetNonEnumerableProperty( tuple, 'toString', toString );\n\n\t\treturn tuple;\n\n\t\t/**\n\t\t* Returns an accessor to retrieve a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction getter( i ) {\n\t\t\treturn get;\n\n\t\t\t/**\n\t\t\t* Returns a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {number} tuple value\n\t\t\t*/\n\t\t\tfunction get() {\n\t\t\t\treturn tuple[ indices[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns an accessor to set a tuple value.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeInteger} i - tuple index\n\t\t* @returns {Function} accessor\n\t\t*/\n\t\tfunction setter( i ) {\n\t\t\treturn set;\n\n\t\t\t/**\n\t\t\t* Sets a tuple value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {number} v - value to set\n\t\t\t*/\n\t\t\tfunction set( v ) {\n\t\t\t\ttuple[ indices[ i ] ] = v;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction getFields() {\n\t\t\treturn fields.slice();\n\t\t}\n\n\t\t/**\n\t\t* Returns the list of tuple fields in index order.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @returns {StringArray} tuple fields\n\t\t*/\n\t\tfunction orderedFields() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tout = fields.slice();\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fields[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// Note: keep functions which follow in alphabetical order\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple key-value pairs.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction entries() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ], tuple[ i ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.entries();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Tests whether all tuple elements pass a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if all elements pass\n\t\t*/\n\t\tfunction every( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( !bool ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element strictly equal to a search element.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=0] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction fieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 0 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl7x', i ) );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple which includes those elements for which a predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t* -   If a predicate function does not return a truthy value for any tuple element, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - filter (predicate) function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction filter( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', predicate ) );\n\t\t\t}\n\t\t\ttmp = [];\n\t\t\tf = [];\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( f.length === nfields ) {\n\t\t\t\treturn namedtypedtuple( tmp, dtype );\n\t\t\t}\n\t\t\tif ( f.length ) {\n\t\t\t\treturn factory( f, opts )( tmp );\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t/**\n\t\t* Returns the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(number|void)} tuple element\n\t\t*/\n\t\tfunction find( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn tuple[ i ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction findField( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tf = fields[ indices[ i ] ];\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, f, tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the index of the first tuple element for which a provided predicate function returns a truthy value.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the predicate function never returns a truthy value, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {integer} tuple index or `-1`\n\t\t*/\n\t\tfunction findIndex( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Invokes a callback for each tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - function to invoke\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t*/\n\t\tfunction forEach( fcn, thisArg ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', fcn ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tfcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Converts a tuple index to a field name.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an out-of-bounds index, the function returns `undefined`.\n\t\t* -   If provided a negative tuple index, the function resolves the index relative to the last tuple element.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} ind - tuple index\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} must provide an integer\n\t\t* @returns {(string|void)} field name or undefined\n\t\t*/\n\t\tfunction ind2key( ind ) {\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isInteger( ind ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl8S', ind ) );\n\t\t\t}\n\t\t\tif ( ind < 0 ) {\n\t\t\t\tind = nfields + ind;\n\t\t\t}\n\t\t\tif ( ind < 0 || ind >= nfields ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn fields[ indices[ ind ] ];\n\t\t}\n\n\t\t/**\n\t\t* Converts a field name to a tuple index.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If provided an unknown field name, the function returns `-1`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {string} key - field name\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a string\n\t\t* @returns {integer} tuple index\n\t\t*/\n\t\tfunction key2ind( key ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isString( key ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3R', key ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tif ( fields[ indices[i] ] === key ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\t/**\n\t\t* Returns an iterator for iterating over tuple keys.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {Iterator} iterator\n\t\t*/\n\t\tfunction keys() {\n\t\t\tvar self;\n\t\t\tvar iter;\n\t\t\tvar FLG;\n\t\t\tvar i;\n\n\t\t\tself = this; // eslint-disable-line no-invalid-this\n\t\t\tif ( self !== tuple ) {\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\n\t\t\t// Initialize the iteration index:\n\t\t\ti = -1;\n\n\t\t\t// Create an iterator protocol-compliant object:\n\t\t\titer = {};\n\t\t\tdefineProperty( iter, 'next', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': next\n\t\t\t});\n\t\t\tdefineProperty( iter, 'return', {\n\t\t\t\t'configurable': false,\n\t\t\t\t'enumerable': false,\n\t\t\t\t'writable': false,\n\t\t\t\t'value': end\n\t\t\t});\n\t\t\tif ( HAS_ITERATOR_SYMBOL ) {\n\t\t\t\tdefineProperty( iter, ITERATOR_SYMBOL, {\n\t\t\t\t\t'configurable': false,\n\t\t\t\t\t'enumerable': false,\n\t\t\t\t\t'writable': false,\n\t\t\t\t\t'value': factory\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn iter;\n\n\t\t\t/**\n\t\t\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction next() {\n\t\t\t\ti += 1;\n\t\t\t\tif ( FLG || i >= nfields ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'value': [ i, fields[ indices[ i ] ] ],\n\t\t\t\t\t'done': false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Finishes an iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {*} [value] - value to return\n\t\t\t* @returns {Object} iterator protocol-compliant object\n\t\t\t*/\n\t\t\tfunction end( value ) {\n\t\t\t\tFLG = true;\n\t\t\t\tif ( arguments.length ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'value': value,\n\t\t\t\t\t\t'done': true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\t'done': true\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/**\n\t\t\t* Returns a new iterator.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @returns {Iterator} iterator\n\t\t\t*/\n\t\t\tfunction factory() {\n\t\t\t\treturn self.keys();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Returns the field of the last tuple element strictly equal to a search element, iterating from right to left.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The function does not distinguish between signed and unsigned zero.\n\t\t* -   If unable to locate a search element, the function returns `undefined`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {*} searchElement - search element\n\t\t* @param {integer} [fromIndex=-1] - tuple index from which to begin searching\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(string|void)} tuple field name or `undefined`\n\t\t*/\n\t\tfunction lastFieldOf( searchElement ) {\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\ti = arguments[ 1 ];\n\t\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl7x', i ) );\n\t\t\t\t}\n\t\t\t\tif ( i >= nfields ) {\n\t\t\t\t\ti = nfields - 1;\n\t\t\t\t} else if ( i < 0 ) {\n\t\t\t\t\ti = nfields + i;\n\t\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ti = nfields - 1;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tif ( tuple[ i ] === searchElement ) {\n\t\t\t\t\treturn fields[ indices[ i ] ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Maps each tuple element to an element in a new tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The returned tuple has the same data type as the host tuple.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - map function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} new tuple\n\t\t*/\n\t\tfunction map( fcn, thisArg ) {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', fcn ) );\n\t\t\t}\n\t\t\tout = namedtypedtuple( dtype );\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ i ] = fcn.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduce( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', fcn ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = 0;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ 0 ];\n\t\t\t\ti = 1;\n\t\t\t}\n\t\t\tfor ( ; i < nfields; i++ ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Applies a function against an accumulator and each element in a tuple and returns the accumulated result, iterating from right to left.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} fcn - reduction function\n\t\t* @param {*} [initial] - initial value\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {*} accumulated result\n\t\t*/\n\t\tfunction reduceRight( fcn ) {\n\t\t\tvar acc;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( fcn ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', fcn ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 1 ) {\n\t\t\t\tacc = arguments[ 1 ];\n\t\t\t\ti = nfields - 1;\n\t\t\t} else {\n\t\t\t\tacc = tuple[ nfields-1 ];\n\t\t\t\ti = nfields - 2;\n\t\t\t}\n\t\t\tfor ( ; i >= 0; i-- ) {\n\t\t\t\tacc = fcn( acc, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\t/**\n\t\t* Reverses a tuple **in-place**.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {TypedArray} reversed tuple\n\t\t*/\n\t\tfunction reverse() {\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < floor( nfields/2 ); i++ ) {\n\t\t\t\tj = nfields - i - 1;\n\t\t\t\ttmp = tuple[ i ];\n\t\t\t\ttuple[ i ] = tuple[ j ];\n\t\t\t\ttuple[ j ] = tmp;\n\t\t\t}\n\t\t\t// Because the indices are bounded [0,nfields), we can use simple arithmetic to \"reverse\" index values in-place...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tindices[ i ] = nfields - indices[ i ] - 1;\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\n\t\t/**\n\t\t* Copies elements to a new tuple with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction slice( begin, end ) {\n\t\t\tvar tmp;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl7w', begin ) );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl7x', end ) );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\ttmp = [];\n\t\t\tfor ( ; i < j; i++ ) {\n\t\t\t\tf.push( fields[ indices[i] ] );\n\t\t\t\ttmp.push( tuple[ i ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tmp, dtype );\n\t\t}\n\n\t\t/**\n\t\t* Tests whether at least one tuple element passes a test implemented by a predicate function.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} predicate - predicate function\n\t\t* @param {*} [thisArg] - execution context\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {boolean} boolean indicating if at least one element passes\n\t\t*/\n\t\tfunction some( predicate, thisArg ) {\n\t\t\tvar bool;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( !isFunction( predicate ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl3p', predicate ) );\n\t\t\t}\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tbool = predicate.call( thisArg, tuple[ i ], i, fields[ indices[i] ], tuple );\n\t\t\t\tif ( bool ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t* Sorts a tuple in-place.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   The comparison function is provided two tuple elements, `a` and `b`, per invocation, and its return value determines the sort order as follows:\n\t\t*\n\t\t*     -   If the comparison function returns a value **less** than zero, then the function sorts `a` to an index lower than `b` (i.e., `a` should come **before** `b`).\n\t\t*     -   If the comparison function returns a value **greater** than zero, then the function sorts `a` to an index higher than `b` (i.e., `b` should come **before** `a`).\n\t\t*     -   If the comparison function returns **zero**, then the relative order of `a` and `b` _should_ remain unchanged.\n\t\t*\n\t\t* -   Invoking this method does **not** affect tuple field assignments.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {Function} [compareFunction] - function which specifies the sort order\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be a function\n\t\t* @returns {TypedArray} sorted tuple\n\t\t*/\n\t\tfunction sort( compareFunction ) {\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\t\t\tvar v;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( arguments.length ) {\n\t\t\t\tif ( !isFunction( compareFunction ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl3p', compareFunction ) );\n\t\t\t\t}\n\t\t\t\tclbk = compareFunction;\n\t\t\t} else {\n\t\t\t\tclbk = ascending;\n\t\t\t}\n\t\t\tindices.sort( wrapper );\n\n\t\t\t// Create a temporary indices array which we'll reorder as we rearrange the tuple elements:\n\t\t\ttmp = indices.slice();\n\n\t\t\t// Rearrange tuple elements according to the rearranged indices (note: every \"move\" moves a tuple element to its desired position with runtime complexity O(N))...\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t// Check if we need to move a tuple element:\n\t\t\t\tif ( tmp[ i ] !== i ) {\n\t\t\t\t\tv = tuple[ i ];\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = tmp[ j ];\n\n\t\t\t\t\t// Follow \"cycles\", stopping once we are back at index `i`...\n\t\t\t\t\twhile ( k !== i ) {\n\t\t\t\t\t\ttuple[ j ] = tuple[ k ];\n\t\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t\t\tj = k;\n\t\t\t\t\t\tk = tmp[ j ];\n\t\t\t\t\t}\n\t\t\t\t\ttuple[ j ] = v;\n\t\t\t\t\ttmp[ j ] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\n\t\t\t/**\n\t\t\t* Wraps a comparison function to allow sorting the internal indices array rather than the tuple directly.\n\t\t\t*\n\t\t\t* @private\n\t\t\t* @param {NonNegativeInteger} ia - first index\n\t\t\t* @param {NonNegativeInteger} ib - second index\n\t\t\t* @returns {*} value specifying the sort order\n\t\t\t*/\n\t\t\tfunction wrapper( ia, ib ) {\n\t\t\t\tvar a = tuple[ indices[ ia ] ];\n\t\t\t\tvar b = tuple[ indices[ ib ] ];\n\t\t\t\treturn clbk( a, b );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t* Creates a new tuple over the same underlying `ArrayBuffer` and with the same underlying data type as the host tuple.\n\t\t*\n\t\t* ## Notes\n\t\t*\n\t\t* -   If the function is unable to resolve indices to a non-empty tuple subsequence, the function returns `null`.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @param {integer} [begin=0] - start element index (inclusive)\n\t\t* @param {integer} [end=tuple.length] - end element index (exclusive)\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @throws {TypeError} first argument must be an integer\n\t\t* @throws {TypeError} second argument must be an integer\n\t\t* @returns {(TypedArray|null)} new tuple\n\t\t*/\n\t\tfunction subtuple( begin, end ) {\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tvar j;\n\t\t\tvar k;\n\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tif ( arguments.length === 0 ) {\n\t\t\t\treturn namedtypedtuple( tuple.buffer, tuple.byteOffset, dtype );\n\t\t\t}\n\t\t\ti = begin;\n\t\t\tif ( !isInteger( i ) ) {\n\t\t\t\tthrow new TypeError( format( '0kl7w', begin ) );\n\t\t\t}\n\t\t\tif ( i < 0 ) {\n\t\t\t\ti = nfields + i;\n\t\t\t\tif ( i < 0 ) {\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tj = nfields;\n\t\t\t} else {\n\t\t\t\tj = end;\n\t\t\t\tif ( !isInteger( j ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl7x', end ) );\n\t\t\t\t}\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj = nfields + j;\n\t\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if ( j > nfields ) {\n\t\t\t\t\tj = nfields;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i >= j ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tf = [];\n\t\t\tfor ( k = i; k < j; k++ ) {\n\t\t\t\tf.push( fields[ indices[k] ] );\n\t\t\t}\n\t\t\treturn factory( f, opts )( tuple.buffer, tuple.byteOffset+(i*tuple.BYTES_PER_ELEMENT), dtype );\n\t\t}\n\n\t\t/**\n\t\t* Serializes a tuple as JSON.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {JSON} tuple JSON representation\n\t\t*/\n\t\tfunction toJSON() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tout = {};\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout[ fields[i] ] = tuple[ indices[i] ];\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\t// TODO: consider adding `toLocaleString()` in a manner similar to `toString()` below\n\n\t\t/**\n\t\t* Serializes a tuple as a string.\n\t\t*\n\t\t* @private\n\t\t* @memberof tuple\n\t\t* @throws {TypeError} `this` must be the host tuple\n\t\t* @returns {string} tuple string representation\n\t\t*/\n\t\tfunction toString() {\n\t\t\tvar out;\n\t\t\tvar i;\n\t\t\tif ( this !== tuple ) { // eslint-disable-line no-invalid-this\n\t\t\t\tthrow new TypeError( format( '0kl1x' ) );\n\t\t\t}\n\t\t\tout = opts.name + '(';\n\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\tout += fields[ i ];\n\t\t\t\tout += '=';\n\t\t\t\tout += tuple[ indices[ i ] ];\n\t\t\t\tif ( i < nfields-1 ) {\n\t\t\t\t\tout += ', ';\n\t\t\t\t}\n\t\t\t}\n\t\t\tout += ')';\n\t\t\treturn out;\n\t\t}\n\t}\n\n\t// Note: keep the following methods in alphabetical order...\n\n\t/**\n\t* Creates a new tuple from an array-like object or an iterable.\n\t*\n\t* @private\n\t* @name from\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {(ArrayLikeObject|Iterable)} src - array-like object or iterable\n\t* @param {Function} [clbk] - callback to invoke for each source element\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an array-like object or an iterable\n\t* @throws {RangeError} source must be compatible with tuple length\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'from', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function from( src ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar tmp;\n\t\t\tvar it;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( format( '0kl1y' ) );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl2S', clbk ) );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( isCollection( src ) ) {\n\t\t\t\tif ( src.length !== nfields ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid argument. Source is incompatible with the number of tuple fields. Number of fields: `%u`. Source length: `%u`.', nfields, src.length ) );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, src[ i ], i, fields[ i ] );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\t\ttuple[ i ] = src[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) {\n\t\t\t\tit = src[ ITERATOR_SYMBOL ]();\n\t\t\t\tif ( !isFunction( it.next ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl2U', src ) );\n\t\t\t\t}\n\t\t\t\tif ( clbk ) {\n\t\t\t\t\ttmp = fromIteratorMap( fields, it, clbk, thisArg );\n\t\t\t\t} else {\n\t\t\t\t\ttmp = fromIterator( it );\n\t\t\t\t}\n\t\t\t\ttuple = namedtypedtuple( tmp, opts.dtype );\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( format( '0kl2U', src ) );\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from an object containing tuple fields.\n\t*\n\t* @private\n\t* @name fromObject\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {Object} obj - source object\n\t* @param {Function} [clbk] - callback to invoke for each source object tuple field\n\t* @param {*} [thisArg] - callback execution context\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {TypeError} first argument must be an object\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'fromObject', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function fromObject( obj ) { // eslint-disable-line no-restricted-syntax\n\t\t\tvar thisArg;\n\t\t\tvar nargs;\n\t\t\tvar tuple;\n\t\t\tvar clbk;\n\t\t\tvar f;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( format( '0kl1y' ) );\n\t\t\t}\n\t\t\tif ( obj === null || typeof obj !== 'object' ) {\n\t\t\t\tthrow new TypeError( format( '0kl3X', obj ) );\n\t\t\t}\n\t\t\tnargs = arguments.length;\n\t\t\tif ( nargs > 1 ) {\n\t\t\t\tclbk = arguments[ 1 ];\n\t\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0kl2S', clbk ) );\n\t\t\t\t}\n\t\t\t\tif ( nargs > 2 ) {\n\t\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\ttuple = namedtypedtuple( nfields, opts.dtype );\n\t\t\tif ( clbk ) {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = clbk.call( thisArg, obj[ f ], f );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( i = 0; i < nfields; i++ ) {\n\t\t\t\t\tf = fields[ i ];\n\t\t\t\t\tif ( hasOwnProp( obj, f ) ) {\n\t\t\t\t\t\ttuple[ i ] = obj[ f ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tuple;\n\t\t}\n\t});\n\n\t/**\n\t* Creates a new tuple from a variable number of arguments.\n\t*\n\t* @private\n\t* @name of\n\t* @memberof namedtypedtuple\n\t* @type {Function}\n\t* @param {...number} element - tuple elements\n\t* @throws {TypeError} `this` must be the host tuple factory\n\t* @throws {RangeError} incompatible number of arguments\n\t* @returns {TypedArray} new tuple\n\t*/\n\tdefineProperty( namedtypedtuple, 'of', {\n\t\t'configurable': false,\n\t\t'enumerable': false,\n\t\t'writable': false,\n\t\t'value': function of() { // eslint-disable-line no-restricted-syntax\n\t\t\tvar args;\n\t\t\tvar i;\n\t\t\tif ( this !== namedtypedtuple ) {\n\t\t\t\tthrow new TypeError( format( '0kl1y' ) );\n\t\t\t}\n\t\t\tif ( arguments.length !== nfields ) {\n\t\t\t\tthrow new RangeError( format( 'invalid invocation. Number of arguments is incompatible with the number of tuple fields. Number of fields: `%u`. Number of arguments: `%u`.', nfields, arguments.length ) );\n\t\t\t}\n\t\t\targs = [];\n\t\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\t\targs.push( arguments[ i ] );\n\t\t\t}\n\t\t\treturn namedtypedtuple( args );\n\t\t}\n\t});\n\n\treturn namedtypedtuple;\n}\n\n\n// EXPORTS //\n\nexport default factory;\n"],"names":["contains","arr","v","i","length","hasDistinctElements","obj","hasOwnProp","DTYPES","dtypes","validate","opts","options","isObject","TypeError","format","dtype","isString","name","ascending","a","b","fromIterator","it","out","next","done","push","value","fromIteratorMap","fields","clbk","thisArg","call","RESERVED_PROPS","propertiesIn","Int8Array","HAS_ITERATOR_SYMBOL","hasIteratorSymbolSupport","factory","names","nfields","err","isStringArray","slice","Error","arguments","namedtypedtuple","indices","nargs","tuple","typedarray","isArrayBuffer","RangeError","getDtype","setNonEnumerableReadWriteAccessor","getter","setter","setNonEnumerableProperty","setNonEnumerableReadOnlyAccessor","getFields","orderedFields","entries","every","fieldOf","filter","find","findIndex","findField","forEach","ind2key","key2ind","keys","lastFieldOf","map","reduce","reduceRight","reverse","some","sort","subtuple","toJSON","toString","self","iter","FLG","this","defineProperty","configurable","enumerable","writable","ITERATOR_SYMBOL","predicate","isFunction","searchElement","isInteger","tmp","f","fcn","ind","key","acc","j","floor","begin","end","compareFunction","k","wrapper","ia","ib","buffer","byteOffset","BYTES_PER_ELEMENT","src","isCollection","args"],"mappings":"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"}